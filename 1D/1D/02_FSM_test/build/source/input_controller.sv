/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module input_controller (
        input wire clk,
        input wire rst_n,
        input wire [2:0] currVal,
        input wire [4:0] io_button,
        output reg validOut
    );
    logic rst;
    localparam _MP_STAGES_423161345 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_423161345)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam logic [4:0][10:0] _MP_CLK_FREQ_1430381047 = {{11'h7d0, 11'h7d0, 11'h7d0, 11'h7d0, 11'h7d0}};
    localparam logic [4:0][0:0] _MP_MIN_DELAY_1430381047 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    localparam _MP_NUM_SYNC_1430381047 = 2'h2;
    logic [4:0] M_but_cond_out;
    logic [4:0] M_but_cond_in = io_button[3'h4:1'h0];
    
    genvar idx_0_1430381047;
    
    generate
        for (idx_0_1430381047 = 0; idx_0_1430381047 < 5; idx_0_1430381047 = idx_0_1430381047 + 1) begin: forLoop_idx_0_1430381047
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_1430381047[idx_0_1430381047]),
                .MIN_DELAY(_MP_MIN_DELAY_1430381047[idx_0_1430381047]),
                .NUM_SYNC(_MP_NUM_SYNC_1430381047)
            ) but_cond (
                .in(M_but_cond_in[idx_0_1430381047]),
                .clk(clk),
                .out(M_but_cond_out[idx_0_1430381047])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][0:0] _MP_RISE_1096886266 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    localparam logic [4:0][0:0] _MP_FALL_1096886266 = {{1'h0, 1'h0, 1'h0, 1'h0, 1'h0}};
    logic [4:0] M_but_edge_out;
    logic [4:0] M_but_edge_in = io_button[3'h4:1'h0];
    
    genvar idx_0_1096886266;
    
    generate
        for (idx_0_1096886266 = 0; idx_0_1096886266 < 5; idx_0_1096886266 = idx_0_1096886266 + 1) begin: forLoop_idx_0_1096886266
            edge_detector #(
                .RISE(_MP_RISE_1096886266[idx_0_1096886266]),
                .FALL(_MP_FALL_1096886266[idx_0_1096886266])
            ) but_edge (
                .in(M_but_edge_in[idx_0_1096886266]),
                .clk(clk),
                .out(M_but_edge_out[idx_0_1096886266])
            );
        end
    endgenerate
    
    
    always @* begin
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        validOut = 1'h0;
        
        case (currVal)
            1'h0: begin
                validOut = M_but_edge_out[1'h0] ? M_but_edge_out[1'h0] : 1'h0;
            end
            1'h1: begin
                validOut = M_but_edge_out[1'h1] ? M_but_edge_out[1'h1] : 1'h0;
            end
            2'h2: begin
                validOut = M_but_edge_out[2'h2] ? M_but_edge_out[2'h2] : 1'h0;
            end
            2'h3: begin
                validOut = M_but_edge_out[2'h3] ? M_but_edge_out[2'h3] : 1'h0;
            end
            default: begin
                validOut = 1'h0;
            end
        endcase
    end
    
    
endmodule