/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module multi_decimal_counter #(
        parameter DIGITS = 3'h4,
        parameter MODE = 1'h0
    ) (
        input wire clk,
        input wire rst,
        input wire inc,
        input wire [(DIGITS)-1:0][3:0] start,
        input wire [(DIGITS)-1:0][3:0] limit,
        output reg [(DIGITS)-1:0][3:0] digits
    );
    logic [(DIGITS)-1:0] M_dctr_inc;
    logic [(DIGITS)-1:0] M_dctr_dec;
    logic [(DIGITS)-1:0] M_dctr_ovfp;
    logic [(DIGITS)-1:0] M_dctr_ovfn;
    logic [(DIGITS)-1:0][3:0] M_dctr_value;
    logic [3:0] M_dctr_start = start[DIGITS - 1'h1:1'h0];
    logic [3:0] M_dctr_limit = limit[DIGITS - 1'h1:1'h0];
    
    genvar idx_0_160984496;
    
    generate
        for (idx_0_160984496 = 0; idx_0_160984496 < DIGITS; idx_0_160984496 = idx_0_160984496 + 1) begin: forLoop_idx_0_160984496
            decimal_counter dctr (
                .start(M_dctr_start[idx_0_160984496]),
                .limit(M_dctr_limit[idx_0_160984496]),
                .clk(clk),
                .rst(rst),
                .inc(M_dctr_inc[idx_0_160984496]),
                .dec(M_dctr_dec[idx_0_160984496]),
                .ovfp(M_dctr_ovfp[idx_0_160984496]),
                .ovfn(M_dctr_ovfn[idx_0_160984496]),
                .value(M_dctr_value[idx_0_160984496])
            );
        end
    endgenerate
    
    
    always @* begin
        M_dctr_inc = 1'h0;
        M_dctr_dec = 1'h0;
        if (MODE == 1'h0) begin
            M_dctr_inc[1'h0] = inc;
            M_dctr_inc[DIGITS - 1'h1:1'h1] = M_dctr_ovfp[DIGITS - 2'h2:1'h0];
        end
        if (MODE == 1'h1) begin
            M_dctr_dec[1'h0] = inc;
            M_dctr_dec[DIGITS - 1'h1:1'h1] = M_dctr_ovfn[DIGITS - 2'h2:1'h0];
        end
        digits = M_dctr_value;
    end
    
    
endmodule