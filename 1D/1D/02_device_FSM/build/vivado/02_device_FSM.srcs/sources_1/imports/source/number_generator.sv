/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module number_generator (
        input wire clk,
        input wire rst_n,
        input wire in,
        output reg [1:0] out
    );
    logic rst;
    localparam CLOCK_DIVIDER = 5'h1a;
    localparam CLK_FREQ = 27'h5f5e100;
    localparam SEG_REFRESH = 4'ha;
    localparam _MP_STAGES_1260635364 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_1260635364)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    localparam _MP_SIZE_1218699882 = 1'h1;
    localparam _MP_DIV_1218699882 = 5'h1a;
    localparam _MP_TOP_1218699882 = 1'h0;
    localparam _MP_UP_1218699882 = 1'h1;
    logic [0:0] M_slow_clk_value;
    
    counter #(
        .SIZE(_MP_SIZE_1218699882),
        .DIV(_MP_DIV_1218699882),
        .TOP(_MP_TOP_1218699882),
        .UP(_MP_UP_1218699882)
    ) slow_clk (
        .clk(clk),
        .rst(rst),
        .value(M_slow_clk_value)
    );
    
    
    localparam _MP_SIZE_1942867817 = 4'h8;
    logic [7:0] M_generator_out;
    
    random_number_generator #(
        .SIZE(_MP_SIZE_1942867817)
    ) generator (
        .slow_clk(M_slow_clk_value),
        .refresh(in),
        .clk(clk),
        .out(M_generator_out)
    );
    
    
    localparam _MP_DIGITS_1700819734 = 3'h4;
    localparam _MP_LEADING_ZEROS_1700819734 = 1'h1;
    logic [3:0][3:0] M_bin_to_dec_digits;
    
    bin_to_dec #(
        .DIGITS(_MP_DIGITS_1700819734),
        .LEADING_ZEROS(_MP_LEADING_ZEROS_1700819734)
    ) bin_to_dec (
        .value(M_generator_out),
        .digits(M_bin_to_dec_digits)
    );
    
    
    logic [3:0][3:0] finalDigits = {M_bin_to_dec_digits[0:0], M_bin_to_dec_digits[1:1], M_bin_to_dec_digits[2:2], M_bin_to_dec_digits[3:3]};
    logic [3:0] combDigits = finalDigits[2'h3] ^ finalDigits[2'h2];
    localparam _MP_SIZE_619101855 = 6'h20;
    logic M_alu_z;
    logic M_alu_v;
    logic M_alu_n;
    logic [31:0] M_alu_out;
    
    alu #(
        .SIZE(_MP_SIZE_619101855)
    ) alu (
        .a((6'h20)'(combDigits)),
        .b(32'h4),
        .alufn(6'h3),
        .z(M_alu_z),
        .v(M_alu_v),
        .n(M_alu_n),
        .out(M_alu_out)
    );
    
    
    always @* begin
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        out = (2'h3)'(M_alu_out);
    end
    
    
endmodule