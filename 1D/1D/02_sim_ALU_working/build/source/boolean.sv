/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module boolean #(
        parameter SIZE = 6'h20
    ) (
        input wire [(SIZE)-1:0] a,
        input wire [(SIZE)-1:0] b,
        input wire [2:0] alufn,
        output reg [(SIZE)-1:0] out
    );
    logic [31:0] R_2f69a88e_i;
    logic [31:0] RR_2f69a88e_i;
    logic [(SIZE)-1:0][2:0] M_mux_modeSel;
    logic [(SIZE)-1:0] M_mux_a;
    logic [(SIZE)-1:0] M_mux_b;
    logic [(SIZE)-1:0] M_mux_out;
    
    genvar idx_0_1433997520;
    
    generate
        for (idx_0_1433997520 = 0; idx_0_1433997520 < SIZE; idx_0_1433997520 = idx_0_1433997520 + 1) begin: forLoop_idx_0_1433997520
            boolean_mux_4 mux (
                .modeSel(M_mux_modeSel[idx_0_1433997520]),
                .a(M_mux_a[idx_0_1433997520]),
                .b(M_mux_b[idx_0_1433997520]),
                .out(M_mux_out[idx_0_1433997520])
            );
        end
    endgenerate
    
    
    always @* begin
        for (RR_2f69a88e_i = 0; RR_2f69a88e_i < SIZE; RR_2f69a88e_i = RR_2f69a88e_i + 1) begin
      R_2f69a88e_i = (0) + RR_2f69a88e_i * (1);
            M_mux_modeSel[R_2f69a88e_i] = alufn;
            M_mux_a[R_2f69a88e_i] = a[R_2f69a88e_i];
            M_mux_b[R_2f69a88e_i] = b[R_2f69a88e_i];
            out[R_2f69a88e_i] = M_mux_out[R_2f69a88e_i];
        end
    end
    
    
endmodule