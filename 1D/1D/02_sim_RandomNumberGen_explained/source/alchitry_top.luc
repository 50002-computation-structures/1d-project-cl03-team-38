module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led[3][8],    // LEDs on IO Shield
    output io_segment[8],   // 7-segment LEDs on IO Shield
    output io_select[4],    // Digit select on IO Shield
    input io_button[5],     // 5 buttons on IO Shield
    input io_dip[3][8]      // DIP switches on IO Shield
) {
    
    sig rst                 // reset signal
    const CLOCK_DIVIDER = $is_sim() ? 11 : 26
    const CLK_FREQ = $is_sim() ? 1000 : 100000000
    const SEG_REFRESH = $is_sim() ? 2 : 10
    
    .clk(clk) {
        reset_conditioner reset_cond
        button_conditioner io_button_0(.in(io_button[0]), #CLK_FREQ(CLK_FREQ))
        .rst(rst){
             dff seg_multiplex[2](#INIT(0))
             counter slow_clk(#SIZE(1), #DIV(CLOCK_DIVIDER))  // slower
             counter seg_clk(#SIZE(1), #DIV(SEG_REFRESH))     // faster
        }
        edge_detector button_0_edge(#RISE(1), #FALL(0), .in(io_button_0.out)) 
        edge_detector seg_clk_edge(#RISE(1), #FALL(0), .in(seg_clk.value))    
        random_number_generator generator(.slow_clk(slow_clk.value), .refresh(button_0_edge.out))
    }   // RNG powered by slow clock counter, reset upon button 0 
    
    decoder seg_selector(#WIDTH(2), .in(seg_multiplex.q)) // used to select active segment 0 to 3
    bin_to_dec bin_to_dec(#DIGITS(4), .value(generator.out), #LEADING_ZEROS(1)) 
    // convert generator output binary to 4 decimal digits array. leading empty digits marked 0
    
    sig finalDigits[4][4] = $reverse(bin_to_dec.digits);
    sig combDigits[4] = finalDigits[3]^finalDigits[2];
    
    // match encoder[0].char to bin_to_dec.digits[0], and so on
    seven_segment_encoder encoder[4](.char(finalDigits))
    
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        led = 8h00              // turn LEDs off
        
        usb_tx = usb_rx         // loop serial port
        
        seg_multiplex.d = seg_multiplex.q
        
        if(seg_clk_edge.out){
                seg_multiplex.d = seg_multiplex.q + 1
        }
        
        io_led[2] = combDigits;
        io_led[1] = combDigits[3:1]
        io_led[0] = generator.out;
        io_segment = ~encoder.segs[seg_multiplex.q] // multiplex used to select which encoded digit to be displayed 
        io_select = ~seg_selector.out
    }
}