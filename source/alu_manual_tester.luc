// ALU Manual Tester Module
module alu_manual_tester#(
    CLK_FREQ ~ 1000 : CLK_FREQ > 0  // System clock frequency
)(
    input clk,             // System clock
    input rst,             // Reset signal
    input io_button[5],    // Buttons for manual control
    input io_dip[3][8],    // DIP switches as ALU inputs
    output io_led[3][8],   // Display ALU inputs & outputs on LEDs
    output led[8],         // Debugging LEDs
    output io_segment[8],  // 7-Segment Display Output
    output io_select[4]    // 7-Segment Digit Select
) {
    const SIZE = 4;  // ALU operand size

    // Internal signals
    sig a[SIZE];       // First operand
    sig b[SIZE];       // Second operand
    sig alufn[6];      // ALU function selection
    sig alu_out[SIZE]; // ALU result

    // ALU Instance
    alu alu_inst(#SIZE(SIZE));

    always {
        // Read inputs from DIP switches
        a = io_dip[0];  
        b = io_dip[1];  
        alufn = io_dip[2][5:0];  // Extract first 6 bits for ALU function

        // Connect inputs to ALU
        alu_inst.a = a;
        alu_inst.b = b;
        alu_inst.alufn = alufn;
        alu_out = alu_inst.out;
        
        // Display input and output values on LEDs
        io_led[0] = a;
        io_led[1] = b;
        io_led[2] = alu_out;
        
        // Debugging indicators (lower 8 bits of ALU result)
//        led = alu_out[7:0];  
        led = c{alu_inst.zero_flag,0,alu_inst.overflow_flag,0,alu_inst.negative_flag};  
        
        // Display ALU output on 7-segment display
        io_segment = alu_out[SIZE-1:0];  
        io_select = 4hF;  // Enable all digits
    }
}
